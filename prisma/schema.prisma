generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = "postgresql://postgres:bhavsar7@localhost:5432/shubhsambandh?schema=public"
    // url       = env("POSTGRES_PRISMA_URL")
    // directUrl = env("POSTGRES_URL_NON_POOLING")
}

model AuthUser {
    id                String        @id @unique
    firstName         String
    lastName          String
    gender            String
    caste             String
    dateOfBirth       DateTime
    timeOfBirth       String
    state             String
    city              String
    country           String
    maritalStatus     String
    mobileNumber      String        @unique
    email             String        @unique
    profilePictureUrl String
    isPaid            Boolean       @default(false)
    isProfileComplete Boolean       @default(false)
    auth_session      AuthSession[]
    auth_key          AuthKey[]
    expires           DateTime?
    Bookmark          Bookmark[]
    Connection        Connection[]
    details           details[]
    payments          payments[]

    @@map("auth_user")
}

model payments {
    id        String   @id @unique
    userId    String
    orderId   String
    signature String
    amount    Int
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user      AuthUser @relation(references: [id], fields: [userId], onDelete: Cascade)

    @@index([userId])
}

model Connection {
    id         String   @id @unique @default(uuid())
    senderId   String
    receiverId String
    status     String   @default("pending")
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    user       AuthUser @relation(references: [id], fields: [senderId], onDelete: Cascade)

    @@index([senderId])
}

model Bookmark {
    id               String   @id @unique @default(uuid())
    userId           String
    bookmarkedUserId String
    createdAt        DateTime @default(now())
    updatedAt        DateTime @updatedAt
    user             AuthUser @relation(references: [id], fields: [userId], onDelete: Cascade)

    @@index([userId])
}

model AuthSession {
    id             String   @id @unique
    user_id        String
    active_expires BigInt
    idle_expires   BigInt
    auth_user      AuthUser @relation(references: [id], fields: [user_id], onDelete: Cascade)

    @@index([user_id])
    @@map("auth_session")
}

model AuthKey {
    id              String   @id @unique
    hashed_password String?
    user_id         String
    expires         BigInt?
    auth_user       AuthUser @relation(references: [id], fields: [user_id], onDelete: Cascade)

    @@index([user_id])
    @@map("auth_key")
}

model details {
    userId               String   @id @unique @default(uuid())
    personal_details     Json?
    medical_details      Json?
    spiritual_details    Json?
    lifestyle_details    Json?
    educational_details  Json?
    professional_details Json?
    family_details       Json?
    partner_preferences  Json?
    astrology_details    Json?
    AuthUser             AuthUser @relation(references: [id], fields: [userId], onDelete: Cascade)

    @@index([userId])
}
